# setup for keychain
if [ -a $HOME/.ssh/id_rsa ]; then
  DESKTOP=`uname -n`
  /usr/local/bin/keychain --quiet --agents ssh ~/.ssh/id_rsa
  source $HOME/.keychain/$DESKTOP-sh
else
  echo "Keys not present; password-less login not available."
fi

# setup command line environment
from=`who am i | sed -n 's/.*(\(.*\))/\1/p'`
if [ $from ]; then
  export PS1="\[\e]1;\h:\W\a\e]2;\h:\w\a\e[31;1m\]\W\$\[\e[0m\] "
else
  export PS1="\[\e]1;\h:\W\a\e]2;\h:\w\a\e[34;1m\]\W\$\[\e[0m\] "
fi

export CLICOLOR=1
shopt -s histappend
shopt -s checkwinsize
export PROMPT_COMMAND='history -a'
export LANG=en_US.UTF-8

# for bilder
#export MAIL_ADDRESS=mgalloy@gmail.com

export EDITOR="emacs -nw"

export PATH=.:$HOME/bin:$HOME/software/bin:/usr/local/bin:/usr/local/sbin:/usr/games:$PATH
export LD_LIBRARY_PATH=$HOME/lib:$HOME/lib64

if [ -d $HOME/.gem/ruby/1.8/bin ]; then
  export PATH=$HOME/.gem/ruby/1.8/bin:$PATH
fi

# setup IDL license
case $HOSTNAME in
    kettricken*)
      export LM_LICENSE_FILE=1700@zrv.txcorp.com
      ;;
    thyme*)
      echo "Hostname $HOSTNAME: using local IDL license"
      ;;
    *)
      export LM_LICENSE_FILE=1700@zrv.txcorp.com
      ;;
esac

# add TeX tools to path
TEXLIVE_BINDIR=/usr/local/texlive/2020/bin/x86_64-darwin
if [ -d $TEXLIVE_BINDIR ]; then
  export PATH=$TEXLIVE_BINDIR:$PATH
else
  echo "TeX Live not present"
fi

# setup TaskDL
export TASKDL2_DIR=$HOME/projects/taskdl-2.4/install
if [ -d $TASKDL2_DIR ]; then
  export PATH=$TASKDL2_DIR/bin:$PATH
else
  if [ "x$SSH_TTY" != "x" ]; then
    echo "TaskDL not present in $TASKDL2_DIR"
  fi
fi

# setup mpiDL
export MPIDL_DIR=$HOME/software/mpidl-par
if [ -d $MPIDL_DIR ]; then
  export PATH=$PATH:$MPIDL_DIR/bin
else
  if [ "x$SSH_TTY" != "x" ]; then
    echo "mpiDL not present in $MPIDL_DIR"
  fi
fi

# setup mglib
export MGLIB_DIR=$HOME/software/mglib
if [ -d $MGLIB_DIR ]; then
  export PATH=$MGLIB_DIR/bin:$PATH
else
  if [ "x$SSH_TTY" != "x" ]; then
    echo "mglib is not present in $MGLIB_DIR"
  fi
fi

# setup mgunit
export MGUNIT_DIR=$HOME/software/mgunit
if [ -d $MGUNIT_DIR ]; then
  export PATH=$MGUNIT_DIR/bin:$PATH
else
  if [ "x$SSH_TTY" != "x" ]; then
    echo "mgunit is not present in $MGUNIT_DIR"
  fi
fi

# setup CUDA
if /usr/sbin/ioreg -l | grep -i nvidia > /dev/null; then
  if [ -d /usr/local/cuda ]; then
    export PATH=/usr/local/cuda/bin:$PATH
  else
    echo "CUDA not present in /usr/local/cuda"
  fi
fi

# setup rIDL
if [ -d $HOME/software/ridl ]; then
  export MANPATH=$HOME/software/ridl/share/man:$MANPATH
else
  echo "rIDL not installed in $HOME/software/ridl"
fi

# setup easy_install build architecture
export ARCHFLAGS="-arch x86_64"

#if [ -f /usr/local/etc/bash_completion ]; then
#  source /usr/local/etc/bash_completion
#fi

if [ -a $HOME/.aliases ]; then
  source $HOME/.aliases
else
  echo "Aliases not present in $HOME/.aliases"
fi

if [ -a $HOME/.git-completion.bash ]; then
  source $HOME/.git-completion.bash
else
  echo "git completion not present"
fi

# setup heasoft (ftools, etc.)
HEASOFT_DIR=$HOME/software/heasoft-install/x86_64-apple-darwin14.1.0
if [ -d $HEASOFT ]; then
  export FTOOLS=$HEASOFT_DIR
  export PATH=$HEASOFT_DIR/bin:$PATH
fi

test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

# setup poetry
if [ -d $HOME/.poetry/bin ]; then
  export PATH=$HOME/.poetry/bin:$PATH
fi

# setup pyenv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/mgalloy/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/mgalloy/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/mgalloy/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/mgalloy/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
